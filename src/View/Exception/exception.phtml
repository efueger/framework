<?php
/**
* @copyright  Copyright (c) 2003-2007 the Agavi Project. (http://www.agavi.org)
* @license http://www.agavi.org/LICENSE.txt GNU LGPL
*/

/**
* Build a list of parameters passed to a method. Example:
* array([object Filter], 'baz' => array(1, 2), 'log' => [resource stream])
*
* @param      array (associative) array of variables.
*
* @return     string A string, possibly formatted using HTML "em" tags.
*
* @author     David Zülke <dz@bitxtender.com>
* @since      0.11.0
*/
function buildParamList($params) {
    $retval = array();

    foreach($params as $key => $param) {
        if(is_string($key)) {
            $key = htmlspecialchars(var_export($key, true) . ' => ');
        } else {
            $key = '';
        }

        switch(gettype($param)) {
            default:
                $retval[] = $key . htmlspecialchars(var_export($param, true));
                break;
            case 'array':
                $retval[] = $key . 'array(' . buildParamList($param) . ')';
            break;
            case 'object':
                $retval[] = $key . '[object <em>' . get_class($param) . '</em>]';
            break;
            case 'resource':
                $retval[] = $key . '[resource <em>' . get_resource_type($param) . '</em>]';
            break;
            case 'string':
                $retval[] = $key . htmlspecialchars(var_export(strlen($param) > 51 ? substr_replace($param, ' … ', 25, -25) : $param, true));
            break;
        }
    }

    return implode(', ', $retval);
}

/** @var Exception $exception */
// fix stack trace in case it doesn't contain the exception origin as the first entry
if (!isset($exception)) {
    $exception = $this->exception;
}

$fixedTrace = $exception->getTrace();
if(isset($fixedTrace[0]['file']) && $fixedTrace[0]['file'] != $exception->getFile() && $fixedTrace[0]['line'] != $exception->getLine()) {
$fixedTrace = array_merge(array(array('file' => $exception->getFile(), 'line' => $exception->getLine())), $fixedTrace);
}

?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Application Exception</title>
    <meta http-equiv="Content-Language" content="en" />
    <meta name="robots" content="none" />
    <style type="text/css">
        html {
            background-color:#EEE;
        }

        body {
            margin:5em;
            padding:2em;
            border:1px solid #DDD;
            -moz-border-radius: 0.5em;
            background-color:#FFF;
            font-family:Verdana, Arial, sans-serif;
            line-height:1.5em;
            font-size:10pt;
        }

        h1 {
            margin:0 0 1.5em 0;
        }

        h3 {
            margin:2em 0 0 0;
        }

        #message {
            font-weight:bold;
            padding:0.5em;
            -moz-border-radius:0.5em;
            border:1px solid #FB2;
            background-color:#FFC;
            position:relative;
        }

        #help {
            font-weight:bold;
            padding:0.5em;
            -moz-border-radius:0.5em;
            border:1px solid #66D;
            background-color:#F0F0FF;
            position:relative;
        }

        ol {
            font-size:8pt;
            line-height:1.5em;
        }

        li.hidecode ol {
            display:none;
        }

        ol li {
            margin:0 0 1em 0;
        }

        ol ol li {
            margin:auto;
        }

        a.toggle:before {
            content:'« ';
        }

        .hidecode a.toggle:before {
            content:'';
        }

        .hidecode a.toggle:after {
            content:' »';
        }

        ol ol {
            border:1px solid #DDD;
            -moz-border-radius:0.5em;
            font-family:monospace;
            font-size:10pt;
            line-height:1em;
            min-height:7em;
            padding:0.5em 0.5em 0.5em 0;
        }

        li.highlight code {
            background-color:#EEE;
        }

        abbr {
            border-bottom:1px dotted #000;
            cursor:help;
        }

        code {
            display:block;
            margin:0;
            padding:0;
        }
    </style>
</head>
<body>
<h1><?php echo get_class($exception); ?></h1>
<?php if($exception instanceof Exception): ?>
    <p id="help">
        This is an internal Application exception. Please consult the documentation for assistance with solving this issue.</p>
<?php endif; ?>
<p>An exception of type <strong><?php echo get_class($exception); ?></strong> was thrown, but did not get caught during the execution of the request. You will find information provided by the exception along with a stack trace below.</p>
<p id="message">
    <?php echo nl2br(htmlentities($exception->getMessage())); ?>
</p>
<h3>Stack Trace</h3>
<ol>
    <?php
    $i = 0;
    $highlights = array();
    foreach($fixedTrace as $trace):
        $i++;
        if(isset($trace['file']) && !isset($highlights[$trace['file']])) {
            $highlights[$trace['file']] = highlight_string(str_replace('  ', '  ', file_get_contents($trace['file'])), true);
            $highlights[$trace['file']] = str_replace(array("\r\n", "\n", "\r"), array('', '', ''), $highlights[$trace['file']]);
            $highlights[$trace['file']] = str_replace(array('<code><span style="color: #000000">', '</span></code>', '&nbsp;'), array('', '', '&#160;'), $highlights[$trace['file']]);
            $highlights[$trace['file']] = explode('<br />', $highlights[$trace['file']]);
        }
        ?>
        <li id="frame<?php echo $i; ?>"<?php if($i > 1): ?> class="hidecode"<?php endif; ?>>at <?php if($i > 1): ?><strong><?php if(isset($trace['class'])): ?><?php echo $trace['class'], htmlspecialchars($trace['type']); ?><?php endif; ?><?php echo $trace['function']; ?><?php if(isset($trace['args'])): ?>(<?php echo buildParamList($trace['args']); ?>)<?php endif; ?></strong><?php else: ?><em>exception origin</em><?php endif; ?><br />in <?php if(isset($trace['file'])): echo str_replace(
                array(
                    '_' . 'app_modules_dir',
                    '_' . 'app_tpl_dir',
                    '_' . 'app_config_dir',
                    '_' . 'app_cache_dir',
                    '_' . 'app_lib_dir',
                    '_' . 'app_dir'
                ),
                array(
                    '<abbr title="' . 'app_modules_dir' . '">app_modules_dir</abbr>',
                    '<abbr title="' . 'app_tpl_dir' . '">app_tpl_dir</abbr>',
                    '<abbr title="' . 'app_config_dir' . '">app_config_dir</abbr>',
                    '<abbr title="' . 'app_cache_dir' . '">app_config_dir</abbr>',
                    '<abbr title="' . 'app_lib_dir' . '">app_lib_dir</abbr>',
                    '<abbr title="' . 'app_dir' . '">app_dir</abbr>'
                ),
                '_' . $trace['file']); ?> <a href="#frame<?php echo $i; ?>" class="toggle" title="Toggle source code snippet" onclick="this.parentNode.className = this.parentNode.className == 'hidecode' ? '' : 'hidecode'; return false;">line <?php echo $trace['line']; ?></a><ol start="<?php echo $start = $trace['line'] < 4 ? 1 : $trace['line'] - 3; ?>" style="padding-left:<?php echo strlen($start+6)*0.6+2; ?>em"><?php $lines = array_slice($highlights[$trace['file']], $start - 1, 7, true);
                foreach($lines as $key => &$line) {
                    if($key + 1 == $trace['line']): ?><li class="highlight"><?php else: ?><li><?php endif; ?><code><?php
                    if($line == '') $line = '&#160;';
                    if(strpos($line, '</span>') === 0) $line = substr($line, 7);
                    if(strpos($line, '</span>') < strpos($line, '<span') || strpos($line, '<span') === false) for($j = $key; $j >= 0; $j--) {
                        if(($pos = strrpos($highlights[$trace['file']][$j], '<span')) !== false) {
                            $line = substr($highlights[$trace['file']][$j], $pos, 29) . $line;
                            break;
                        }
                    }
                    if
                    (strrpos($line, '</span>') < strrpos($line, '<span') || strpos($line, '</span>') === false) $line .= '</span>';
                    if(strpos($line, ' ', 20) == 29) $line = substr_replace($line, '&#160;', 29, 1);
                    echo $line;

                    ?></code></li>
                <?php } ?></ol><?php else: // no info about origin file ?><em>unknown</em><?php endif; ?></li>
    <?php endforeach; ?>
</ol>
<h3>Version Information</h3>
<dl>
    <dt>PHP:</dt>
    <dd><?php echo phpversion(); ?></dd>
    <dt>System:</dt>
    <dd><?php echo php_uname(); ?></dd>
</dl>
</body>
</html>